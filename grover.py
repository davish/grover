# -*- coding: utf-8 -*-
"""530_Baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gpj2UVHl288mM-zodMBhnzWd3tB0BqHF
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip3 install scikit-learn
from os.path import exists
from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag
platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())
cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\.\([0-9]*\)\.\([0-9]*\)$/cu\1\2/'
accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'
!pip3 install https://download.pytorch.org/whl/cu100/torch-1.0.1-cp36-cp36m-linux_x86_64.whl
!pip3 install torch torchvision
!pip3 install unidecode
!pip3 install pronouncing
import torch
device =  torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

import unidecode
import string
import random
import re
import time
import math

import torch.nn as nn
from torch.autograd import Variable
import torch
import torch.nn.functional as F

file = open('/content/gdrive/My Drive/CIS530 Final Project/gigaword-sample.flat')
english_corpus = []
for line in file:
  line = unidecode.unidecode(line)
  english_corpus.extend(line.split())
  
file = unidecode.unidecode(open('/content/gdrive/My Drive/CIS530 Final Project/kanye.txt').read())
file = re.sub(r'\[.*\]', '', file)
file = re.sub(r'\n+', '\n', file)
first_split = file.split(' ')
next_split = []
for token in first_split:
  next_split.extend(re.findall(r"[\w']+|[\n]", token))
  
second_split = []
for token in next_split:
  if '\n' in token:
    splits = token.split('\n')
    for subtoken in splits[:-1]:
      second_split.extend([subtoken, '\n'])
    second_split.append(splits[-1])
  else:
    second_split.append(token)
    
kanye_corpus = second_split

vocab = list(set(kanye_corpus) | set(english_corpus))
n_vocab = len(vocab)

import math
english_occurrances = dict()
kanye_occurrances = dict()
for word in english_corpus:
  english_occurrances[word] = english_occurrances.get(word, 0) + 1
for word in kanye_corpus:
  kanye_occurrances[word] = english_occurrances.get(word, 0) + 1
  
kanyeness = dict()
for word in set(kanye_corpus) & set(english_corpus):
  if kanye_occurrances[word] >= 5 and english_occurrances[word] >= 5:
    n_kanye = math.log(kanye_occurrances[word] / len(kanye_corpus))
    n_english = math.log(english_occurrances[word] / len(english_corpus))
    kanyeness[word] = n_kanye - n_english

from nltk.corpus import stopwords
nltk.download('stopwords')


blacklist = set(stopwords.words('english')) | {'', '\n'}
s = [(k, kanyeness[k]) for k in sorted(kanyeness, key=kanyeness.get, reverse=True) if k not in blacklist]

s[:20]

class RNN(nn.Module):
    def __init__(self, input_size=n_vocab, hidden_size=100, output_size=n_vocab, n_layers=1):
        super(RNN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers
        
        self.encoder = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)
    
    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        output, hidden = self.gru(input.view(1, 1, -1), hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        return Variable(torch.zeros(self.n_layers, 1, self.hidden_size))

class Attention_RNN(nn.Module):
    def __init__(self, input_size=n_vocab, hidden_size=100, output_size=n_vocab, n_layers=1):
        super(Attention_RNN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers
        self.seen_words = []
        
        self.encoder = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)
        self.attention = nn.Linear(hidden_size + hidden_size, 1)
        self.softmax = nn.Softmax(dim=1)
    
    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        input = input.view(1, 1, -1)
        self.seen_words.append(input)
        attention_weights = torch.zeros(len(self.seen_words), 1)
        for i in range(len(self.seen_words)):
          #print(self.seen_words[i][0][0])
          #print(hidden[0][0])
          combined = torch.cat((self.seen_words[i].flatten(), hidden.flatten()))
          #print(combined.size())
          attention_weights[i] = self.attention(combined)
        attention_weights = self.softmax(attention_weights)
        combined_input = torch.zeros(input.size()[0], input.size()[1], input.size()[2])
        for j in range(len(self.seen_words)):
          combined_input = combined_input + attention_weights[j] * self.seen_words[j]
        output, hidden = self.gru(combined_input, hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        self.seen_words = []
        return Variable(torch.zeros(self.n_layers, 1, self.hidden_size))

lyrics = english_corpus
def random_chunk():
    start_index = random.randint(0, len(lyrics) - chunk_len)
    end_index = start_index + chunk_len + 1
    return ['!'] + lyrics[start_index:end_index]

def char_tensor(string):
    tensor = torch.zeros(len(string)).long()
    for c in range(len(string)):
        tensor[c] = vocab.index(string[c])
    return Variable(tensor)
  
def random_training_set():
    chunk = random_chunk()
    inp = char_tensor(chunk[:-1])
    target = char_tensor(chunk[1:])
    return inp, target
  
  
def train_round(inp, target):
    hidden = decoder.init_hidden()
    decoder.zero_grad()
    loss = 0

    for c in range(chunk_len):
        output, hidden = decoder(inp[c], hidden)
        loss += criterion(output, target[c].unsqueeze(0))

    loss.backward()
    decoder_optimizer.step()
    return loss.data.item() / chunk_len
  
def time_since(since):
    s = time.time() - since
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

chunk_len = 10
n_epochs = 10000
print_every = 20
plot_every = 10
hidden_size = 100
n_layers = 1
lr = 0.005

decoder = Attention_RNN(n_vocab, hidden_size, n_vocab, n_layers)
decoder_optimizer = torch.optim.Adam(decoder.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

start = time.time()
all_losses = []
loss_avg = 0

for epoch in range(1, n_epochs + 1):
    loss = train_round(*random_training_set())       
    loss_avg += loss

    if epoch % print_every == 0:
        print('[%s (%d %d%%) %.4f]' % (time_since(start), epoch, epoch / n_epochs * 100, loss))


    if epoch % plot_every == 0:
        all_losses.append(loss_avg / plot_every)
        loss_avg = 0
      
torch.save(decoder.state_dict(), '/content/gdrive/My Drive/CIS530 Final Project/model_gigaword-sample-prep')

chunk_len = 10
n_epochs = 1000
print_every = 20
plot_every = 10
hidden_size = 100
n_layers = 1
lr = 0.01

decoder = Attention_RNN(n_vocab, hidden_size, n_vocab, n_layers)
decoder_optimizer = torch.optim.Adam(decoder.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

lyrics = kanye_corpus
decoder.load_state_dict(torch.load('/content/gdrive/My Drive/CIS530 Final Project/model_gigaword-sample-prep'))

start = time.time()
all_losses = []
loss_avg = 0

for epoch in range(1, n_epochs + 1):
    loss = train_round(*random_training_set())       
    loss_avg += loss

    if epoch % print_every == 0:
        print('[%s (%d %d%%) %.4f]' % (time_since(start), epoch, epoch / n_epochs * 100, loss))


    if epoch % plot_every == 0:
        all_losses.append(loss_avg / plot_every)
        loss_avg = 0
        
torch.save(decoder.state_dict(), '/content/gdrive/My Drive/CIS530 Final Project/model_gigaword-kanye')

chunk_len = 10
n_epochs = 1000
print_every = 20
plot_every = 10
hidden_size = 100
n_layers = 1
lr = 0.01

decoder = Attention_RNN(n_vocab, hidden_size, n_vocab, n_layers)
decoder_optimizer = torch.optim.Adam(decoder.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

lyrics = kanye_corpus
decoder.load_state_dict(torch.load('/content/gdrive/My Drive/CIS530 Final Project/model_gigaword-kanye'))

import pronouncing, random

def adjusted_meter(meter):
  return meter.replace("2", "1")

def evaluate(prime_str=['fuck'], predict_len=4, temperature=0.8):
    hidden = decoder.init_hidden()
    prime_input = char_tensor(prime_str)
    predicted = prime_str
    target_meter = "1010101010"
    target_rhyme = ""

    # Use priming string to "build up" hidden state
    for p in range(len(prime_str) - 1):
        _, hidden = decoder(prime_input[p], hidden)
    inp = prime_input[-1]
   
    
    while predicted.count("\n") < predict_len:
        output, hidden = decoder(inp, hidden)
        
        # Sample from the network as a multinomial distribution
        output_dist = output.data.view(-1).div(temperature).exp()
        # print(output_dist)
        top_i = torch.multinomial(output_dist, 1)[0]
        # print(top_i)
        
        # Add predicted character to string and use as next input
        predicted_char = vocab[top_i]
        # print(predicted_char)

        if predicted_char.strip() != "":
          if pronouncing.stresses_for_word(predicted_char):
            word_meter = adjusted_meter(pronouncing.stresses_for_word(predicted_char)[0])
            if target_meter.startswith(word_meter):
              predicted += [predicted_char]
              inp = char_tensor([predicted_char])
              target_meter = target_meter[len(word_meter):]
              if target_meter == "":
                final_word = predicted.pop()
                if target_rhyme != "":
                  meter_candidates = pronouncing.search_stresses(pronouncing.stresses_for_word(final_word)[0])
                  rhyme_candidates = pronouncing.rhymes(target_rhyme)
                  candidates = list(set(meter_candidates) & set(rhyme_candidates) & set(vocab))
                  if candidates:
                    #candidates = [output_dist[char_tensor([candidate])] for candidate in candidates if candidate in vocab]
                    #print([char_tensor([candidate]) for candidate in candidates])
                    final_word = random.choice(candidates)
                predicted += [final_word, "\n"]
                print(final_word)
                if target_rhyme == "":
                     target_rhyme = final_word
                else:
                     target_rhyme = ""
                target_meter = "1010101010"  
              elif target_meter == "0":
                target_meter = "1"

    return predicted

def evaluate_prob(prime_str=['fuck'], predict_len=4, temperature=0.8):
    hidden = decoder.init_hidden()
    prime_input = char_tensor(prime_str)
    predicted = prime_str
    target_meter = "1010101010"
    target_rhyme = ""

    # Use priming string to "build up" hidden state
    for p in range(len(prime_str) - 1):
        _, hidden = decoder(prime_input[p], hidden)
    inp = prime_input[-1]
   
    count = 0
    while predicted.count("\n") < predict_len:
        count = count + 1
        output, hidden = decoder(inp, hidden)
        
        # Sample from the network as a multinomial distribution
        output_dist = output.data.view(-1).div(temperature).exp()
        top_i = torch.multinomial(output_dist, 1)[0]
#         max_prob = 0.0
#         top_i = 0
#         for j in range(len(output_dist)):
#           if output_dist[j] > max_prob:
#             max_prob = output_dist[j]
#             top_i = j
        
        # Add predicted character to string and use as next input
        predicted_char = vocab[top_i]
        
        while predicted_char.strip() == "":
#           output_dist[top_i] = 0.0
#           max_prob = 0.0
#           top_i = 0
#           for j in range(len(output_dist)):
#             if output_dist[j] > max_prob:
#               max_prob = output_dist[j]
#               top_i = j
          top_i = torch.multinomial(output_dist, 1)[0]
          predicted_char = vocab[top_i]

        if predicted_char.strip() != "":
          meter = True
          while meter:
            if pronouncing.stresses_for_word(predicted_char):
              word_meter = adjusted_meter(pronouncing.stresses_for_word(predicted_char)[0])
              if target_meter.startswith(word_meter):
                meter = False
              else:
                top_i = torch.multinomial(output_dist, 1)[0]
                predicted_char = vocab[top_i]
            else:
              top_i = torch.multinomial(output_dist, 1)[0]
              predicted_char = vocab[top_i]
          if pronouncing.stresses_for_word(predicted_char):
            word_meter = adjusted_meter(pronouncing.stresses_for_word(predicted_char)[0])
            if target_meter.startswith(word_meter):
              predicted += [predicted_char]
              inp = char_tensor([predicted_char])
              target_meter = target_meter[len(word_meter):]
              if target_meter == "":
                final_word = predicted.pop()
                if target_rhyme != "":
                  meter_candidates = pronouncing.search_stresses(pronouncing.stresses_for_word(final_word)[0])
                  rhyme_candidates = pronouncing.rhymes(target_rhyme)
                  candidates = list(set(meter_candidates) & set(rhyme_candidates) & set(vocab))
                  if candidates:
                    #candidates = [output_dist[char_tensor([candidate])] for candidate in candidates if candidate in vocab]
                    #print([char_tensor([candidate]) for candidate in candidates])
                    max_prob = 0.0
                    max_index = 0
                    for i in range(len(output_dist)):
                      if vocab[i] in candidates and output_dist[i] > max_prob:
                        max_prob = output_dist[i]
                        max_index = i
                    final_word = vocab[max_index]
                predicted += [final_word, "\n"]
                inp = char_tensor([final_word])
                if target_rhyme == "":
                     target_rhyme = final_word
                else:
                     target_rhyme = ""
                target_meter = "1010101010"  
              elif target_meter == "0":
                target_meter = "1"

    #print(count)
    return predicted

print(' '.join(evaluate(['!'], 10)))



