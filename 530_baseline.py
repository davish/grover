# -*- coding: utf-8 -*-
"""530_Baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gpj2UVHl288mM-zodMBhnzWd3tB0BqHF
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip3 install scikit-learn
from os.path import exists
from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag
platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())
cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\.\([0-9]*\)\.\([0-9]*\)$/cu\1\2/'
accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'
!pip3 install https://download.pytorch.org/whl/cu100/torch-1.0.1-cp36-cp36m-linux_x86_64.whl
!pip3 install torch torchvision
!pip3 install unidecode
  
import torch
device =  torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

import unidecode
import string
import random
import re
import time
import math

import torch.nn as nn
from torch.autograd import Variable
import torch
import torch.nn.functional as F

file = unidecode.unidecode(open('/content/gdrive/My Drive/CIS530 Final Project/kanye.txt').read())

file = re.sub(r'\[.*\]', '', file)
file = re.sub(r'\n+', '\n', file)
first_split = file.split(' ')
next_split = []
for token in first_split:
  next_split.extend(re.findall(r"[\w']+|[\n]", token))
  
second_split = []
for token in next_split:
  if '\n' in token:
    splits = token.split('\n')
    for subtoken in splits[:-1]:
      second_split.extend([subtoken, '\n'])
    second_split.append(splits[-1])
  else:
    second_split.append(token)
    
lyrics = second_split + ['!']
lyrics_len = len(lyrics)
vocab = list(set(lyrics))
n_vocab = len(vocab)



random.sample(lyrics, 10)

class RNN(nn.Module):
    def __init__(self, input_size=n_vocab, hidden_size=100, output_size=n_vocab, n_layers=1):
        super(RNN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers
        
        self.encoder = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)
    
    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        output, hidden = self.gru(input.view(1, 1, -1), hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        return Variable(torch.zeros(self.n_layers, 1, self.hidden_size))

def random_chunk():
    start_index = random.randint(0, lyrics_len - chunk_len)
    end_index = start_index + chunk_len + 1
    return ['!'] + lyrics[start_index:end_index]

def char_tensor(string):
    tensor = torch.zeros(len(string)).long()
    for c in range(len(string)):
        tensor[c] = vocab.index(string[c])
    return Variable(tensor)
  
def random_training_set():
    chunk = random_chunk()
    inp = char_tensor(chunk[:-1])
    target = char_tensor(chunk[1:])
    return inp, target

def train_round(inp, target):
    hidden = decoder.init_hidden()
    decoder.zero_grad()
    loss = 0

    for c in range(chunk_len):
        output, hidden = decoder(inp[c], hidden)
        loss += criterion(output, target[c].unsqueeze(0))

    loss.backward()
    decoder_optimizer.step()
    return loss.data.item() / chunk_len

def time_since(since):
    s = time.time() - since
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

random_training_set()

chunk_len = 10
n_epochs = 5000
print_every = 100
plot_every = 10
hidden_size = 100
n_layers = 1
lr = 0.005

decoder = RNN(n_vocab, hidden_size, n_vocab, n_layers)
decoder_optimizer = torch.optim.Adam(decoder.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

start = time.time()
all_losses = []
loss_avg = 0

for epoch in range(1, n_epochs + 1):
    loss = train_round(*random_training_set())       
    loss_avg += loss

    if epoch % print_every == 0:
        print('[%s (%d %d%%) %.4f]' % (time_since(start), epoch, epoch / n_epochs * 100, loss))


    if epoch % plot_every == 0:
        all_losses.append(loss_avg / plot_every)
        loss_avg = 0
        
torch.save(decoder.state_dict(), '/content/gdrive/My Drive/CIS530 Final Project/kanyemodel')

def evaluate(prime_str=['fuck'], predict_len=100, temperature=0.8):
    hidden = decoder.init_hidden()
    prime_input = char_tensor(prime_str)
    predicted = prime_str

    # Use priming string to "build up" hidden state
    for p in range(len(prime_str) - 1):
        _, hidden = decoder(prime_input[p], hidden)
    inp = prime_input[-1]
    
    for p in range(predict_len):
        output, hidden = decoder(inp, hidden)
        
        # Sample from the network as a multinomial distribution
        output_dist = output.data.view(-1).div(temperature).exp()
        top_i = torch.multinomial(output_dist, 1)[0]
        
        # Add predicted character to string and use as next input
        predicted_char = [vocab[top_i]]
        predicted += predicted_char
        inp = char_tensor(predicted_char)

    return predicted

torch.save(decoder.state_dict(), '/content/gdrive/My Drive/CIS530 Final Project/kanyemodel')

print(' '.join(evaluate(['!'], 100)))